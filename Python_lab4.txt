import matplotlib.pyplot as plt
import numpy as np
import random
import datetime
# import prettytable                  # пакет для таблицы
#import matplotlib.pyplot as plt  # библиотека для графика


def BubbleSort(A):  # сортировка пузырьком
    for i in range(len(A)):
        for j in range(len(A) - 1 - i):
            if A[j] > A[j + 1]:
                a = A[j]
                A[j] = A[j + 1]
                A[j + 1] = a


def QuickSort(A, fst, lst):  # быстрая сортировка
    if fst >= lst:
        return

    # i, j = fst, lst
    pivot = A[fst]
    # pivot = A[random.randint(fst, lst)]
    first_bigger = fst + 1
    while first_bigger <= lst:
        if A[first_bigger] >= pivot:
            break
        first_bigger += 1
    i = first_bigger + 1
    while i <= lst:
        if A[i] < pivot:
            A[i], A[first_bigger] = A[first_bigger], A[i]
            first_bigger += 1
        i += 1

    last_smaller = first_bigger - 1
    A[fst], A[last_smaller] = A[last_smaller], A[fst]
    QuickSort(A, fst, last_smaller - 1)
    QuickSort(A, first_bigger, lst)


# ШЕЙКЕРНАЯ СОРТИРОВКА

def shaker(arr):
    n = len(arr)
    for i in range(n // 2):
        for j in range(i, n - 1 - i):
            if arr[j] > arr[j + 1]:
                a = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = a

        for g in range(n - 2 - i, i + 1, -1):
            if arr[g] < arr[g - 1]:
                a = arr[g]
                arr[g] = arr[g - 1]
                arr[g - 1] = a

    return arr


def sort_insert(arr):
    n = len(arr)
    for i in range(1, n):
        t = arr[i]
        j = i
        while j != 0:
            if arr[j - 1] > t:
                arr[j] = arr[j - 1]
                j -= 1
            else:
                break
            arr[j] = t
    return (arr)


# table = prettytable.PrettyTable(["Размер списка", "Время пузырька", "Время быстрой"])
x = []
y1 = []
y2 = []
y3 = []
y4 = []

for N in range(1000, 5001, 1000):
    x.append(N)
    min = 1
    max = N
    A = []
    for i in range(N):
        A.append(int(round(random.random() * (max - min) + min)))

    # print(A)

    B = A.copy()
    C = []
    С = A.copy()
    D = []
    D = A.copy()
    # print(B)
    # print(B)

    # BubbleSort(A)
    print("---")
    # print(A)

    # QuickSort(B, 0, len(B)-1)
    print("---")
    # print(B)

    t1 = datetime.datetime.now()
    BubbleSort(A)
    t2 = datetime.datetime.now()
    y1.append((t2 - t1).total_seconds())
    print("Пузырьковая сортировка   " + str(N) + "   заняла   " + str((t2 - t1).total_seconds()) + "c")

    t3 = datetime.datetime.now()
    QuickSort(B, 0, len(B) - 1)
    t4 = datetime.datetime.now()
    y2.append((t4 - t3).total_seconds())
    print("Быстрая   " + str(N) + "   заняла   " + str((t4 - t3).total_seconds()) + "c")

    t5 = datetime.datetime.now()
    shaker(C)
    t6 = datetime.datetime.now()
    y3.append((t6 - t5).total_seconds())
    print("shaker   " + str(N) + "   заняла   " + str((t6 - t5).total_seconds()) + "c")

    t7 = datetime.datetime.now()
    sort_insert(D)
    t8 = datetime.datetime.now()
    y4.append((t8 - t7).total_seconds())
    print("shaker   " + str(N) + "   заняла   " + str((t8 - t7).total_seconds()) + "c")

    # table.add_row([str(N), str((t2-t1).total_seconds()), str((t4-t3).total_seconds())])
# print(table)

font1 = {'family':'serif','color':'blue','size':20}
font2 = {'family':'serif','color':'darkred','size':15}

plt.title("All sorts", fontdict = font1)
plt.xlabel("Quantity of items to sort", fontdict = font2)
plt.ylabel("Time", fontdict = font2)


plt.plot(x, y1, "C0")
plt.plot(x, y2, "C1")
plt.plot(x, y3, "C0")
plt.plot(x, y4, "C1")


plt.show()

#4 ГРАФИКА
#plot 1:
plt.title("bubble sort", fontdict = font1)
plt.xlabel("Quantity of items to sort", fontdict = font2)
plt.ylabel("Time", fontdict = font2)

plt.subplot(4, 1, 1)
plt.plot(x,y1)

fig = plt.figure(figsize=(10,60))
plt.subplots_adjust(hspace = 30)
fig.savefig('out.png', dpi=100)

#plot 2:
plt.title("quick sort", fontdict = font1)
plt.xlabel("Quantity of items to sort", fontdict = font2)
plt.ylabel("Time", fontdict = font2)

plt.subplot(4, 1, 2)
plt.plot(x,y2)


fig = plt.figure(figsize=(10,60))
plt.subplots_adjust(hspace = 30)
fig.savefig('out.png', dpi=100)

#plot 3:
plt.title("shaker sort", fontdict = font1)
plt.xlabel("Quantity of items to sort", fontdict = font2)
plt.ylabel("Time", fontdict = font2)

plt.subplot(4, 1, 3)
plt.plot(x,y3)

fig = plt.figure(figsize=(10,60))
plt.subplots_adjust(hspace = 30)
fig.savefig('out.png', dpi=100)

#plot 4:
plt.title("insert sort", fontdict = font1)
plt.xlabel("Quantity of items to sort", fontdict = font2)
plt.ylabel("Time", fontdict = font2)

plt.subplot(4, 1, 4)
plt.plot(x,y4, 'o:r')

fig = plt.figure(figsize=(10,60))
plt.subplots_adjust(hspace = 30)
fig.savefig('out.png', dpi=100)


#plot 4 bar
f = plt.figure()
f.set_figwidth(6)
f.set_figheight(5)
plt.bar(x, y4, width=150, color='c', linewidth=2)
plt.show()


